#cloud-config

write_files:
  - content: |
      - name: format volume
        hosts: 127.0.0.1
        vars:
          docker_volume_mountpoint: /var/lib/docker/volumes
        pre_tasks:
          - name: stop docker
            service: name=docker state=stopped
          - name: cleanup "{{ docker_volume_mountpoint }}"
            file: 
              path="{{ docker_volume_mountpoint }}"
              state="{{ item }}"
            with_items:
              - absent
              - directory
        tasks:
          - name: install thin-provisioning-tools
            package: name=thin-provisioning-tools
          - name: setup partition
            parted:
              device: /dev/vdb
              number: 1
              flags: [ lvm ]
              state: present
          - name: setup vg
            lvg:
              vg: portus
              pvs: /dev/vdb1
              pesize: 32
          - name: setup thing pool
            lvol:
              vg: portus
              thinpool: thin
              size: 100%FREE
            when:
              - ansible_lvm['lvs']['thin'] is not defined
          - name: refresh facts
            setup:
          - name: setup lv
            lvol:
              vg: portus
              lv: instance1
              thinpool: thin
              size: "{{ ansible_lvm['lvs']['thin']['size_g'] }}G"
            when:
              - ansible_lvm['lvs']['instance1'] is not defined
          - name: make filesystem
            filesystem:
              fstype: xfs
              dev: /dev/mapper/portus-instance1
          - name: mount fs
            mount:
              path: "{{ docker_volume_mountpoint }}"
              src: /dev/mapper/portus-instance1
              fstype: xfs
              opts: defaults,noatime
              state: mounted
        post_tasks:
          - name: startup docker
            service: name=docker state=started

      - name: install portus
        hosts: 127.0.0.1
        pre_tasks:
           - name: stop consul
             service: name=consul state=stopped
           - name: clean /opt/consul/data/serf/local.keyring
             file: path=/opt/consul/data/serf/local.keyring state=absent
        roles:
          - role: ansible-portus
            portus_password: ${portus_password}
            portus_fqdn: ${portus_fqdn}
            registry_fqdn: ${registry_fqdn}
            letsencrypt_email: ${letsencrypt_email}
          - role: entercloudsuite.consul
            consul_config_validate: "{{ consul_user_home }}/bin/consul validate -config-format=json %s"
            consul_configs:
              main:
                bind_addr: "{{ ansible_default_ipv4['address'] }}"
                client_addr: 0.0.0.0
                node_name: "{{ ansible_hostname }}"
                data_dir: "{{ consul_data_dir }}"
                encrypt: "${consul_encrypt}"
                datacenter: "${consul_datacenter}"
                enable_syslog: true
                server: false
                ui: true
                enable_script_checks: true
                services:
                  - name: "${name}"
                    port: 443
                  - name: "exporter_node"
                    port: 9100
                rejoin_after_leave: true
                retry_join:
                  - "${consul}"
            when: ("${consul}" != "")
    path: /usr/src/cloud/playbook.yml
    permissions: '0400'

runcmd:
  - |
      bash <<'EOF'
      export COMPLETED=false
      while [ "$COMPLETED" == "false" ]; do
        (
          set -e errexit
          set -o pipefail
          # workaround https://github.com/ansible/ansible/issues/21562
          export HOME=/root
          cd /usr/src/cloud
          source venv/bin/activate
          ansible-playbook -e ansible_python_interpreter=/usr/bin/python --connection=local playbook.yml
        ) >> /var/log/cloud-scripts.log 2>&1
        if [ $? == 0 ]; then
          COMPLETED=true
        fi
        sleep 1
      done
      EOF
